<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/jdbc 
	http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.1.xsd">
	
    <context:property-placeholder location="classpath:/conf/jdbc.properties"/>
	
	<!-- Hibernate 4 DataSource数据源 -->
	<!-- 
	<bean id="hibernate4DataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="url" value="${jdbc.url}"></property>
		<property name="driverClassName" value="${jdbc.driverClassName}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
 	-->
 	<bean id="hibernate4DataSource"
		class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName">
			<value>${jdbc.driverClassName}</value>
		</property>
		<property name="url">
			<value>${jdbc.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<property name="maxActive">
			<value>100</value>
		</property>
		<property name="maxIdle">
			<value>3</value>
		</property>
		<property name="maxWait">
			<value>-1</value>
		</property>
		<property name="defaultAutoCommit">
			<value>false</value>
		</property>
	</bean>
	
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref local="hibernate4DataSource" />
		</property>
		
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:/conf/hbm</value>
			</list>
		</property> 
		 
		
		<property name="packagesToScan">
			<list>
				<value>com.frm.model.dto</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.Oracle9iDialect
				</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
<!-- 
create：表示启动的时候先drop，再create
create-drop: 也表示创建，只不过再系统关闭前执行一下drop
update: 这个操作启动的时候会去检查schema是否一致，如果不一致会做scheme更新
validate: 启动时验证现有schema与你配置的hibernate是否一致，如果不一致就抛出异常，并不做更新
none:
-->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				
				<prop key="hibernate.query.substitutions">true 1, false 0</prop>
				<!-- Fetch Size 是设定JDBC的Statement读取数据的时候每次从数据库中取出的记录条数 -->
                <prop key="hibernate.default_batch_fetch_size">100</prop>
                <!-- 设置外连接抓取树的最大深度取值. 建设置为0到3之间 -->
                <prop key="hibernate.max_fetch_depth">2</prop>
                <!-- Batch Size是设定对数据库进行批量删除，批量更新和批量插入的时候的批次大小 -->
                <prop key="hibernate.jdbc.batch_size">50</prop>
               
                <!--  
                <prop key="hibernate.generate_statistics">true</prop>
                <prop key="hibernate.bytecode.use_reflection_optimizer">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.EhCacheRegionFactory</prop>
                <prop key="net.sf.ehcache.configurationResourceName">ehcache_hibernate.xml</prop> 
                -->
               
                <prop key="hibernate.cache.use_structured_entries">true</prop>
           
			</props>
		</property>
	</bean>
	 

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!--定义 DBCP 数据源的 JDBC 本地对象抽取器-->
	<bean id="nativeJdbcExtractor" 
	class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor"
	lazy-init="true" /> 
	
	<bean id="defaultLobHandler" 
		class="org.springframework.jdbc.support.lob.DefaultLobHandler" 
		lazy-init="true"/>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
   	 	<property name="dataSource" ref="hibernate4DataSource" />
	    <!--设置抽取器-->
	    <property name="nativeJdbcExtractor" ref="nativeJdbcExtractor"/> 
	</bean>
	
	<bean id="myJdbcDaoSupport" class="com.frm.model.dao.jdbc.JdbcSupport">
		<property name="lobHandler" ref="defaultLobHandler"/> 
	    <property name="jdbcTemplate">
	    	<ref local="jdbcTemplate"/>
	    </property>
    </bean>
    
    <bean id="myHibernate4DaoSupport" class="com.frm.model.dao.orm.hibernate4.HibernateDaoSupport">
	    <property name="sessionFactory">
	      <ref bean="sessionFactory"/>
	    </property>
    </bean>

  <!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true"/>
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="merge*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="count*" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="list*" propagation="REQUIRED" read-only="true" />
            <tx:method name="query*" propagation="REQUIRED" read-only="true" />
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>
    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* com..service..*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
    
	<import resource="business/base.xml"/> 
	  
</beans>